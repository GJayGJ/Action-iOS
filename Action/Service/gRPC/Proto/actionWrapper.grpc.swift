//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: actionWrapper.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Action_ActionWrapperClient`, then call methods of this protocol to make API calls.
internal protocol Action_ActionWrapperClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol? { get }

  func login(
    _ request: Action_User,
    callOptions: CallOptions?
  ) -> UnaryCall<Action_User, SwiftProtobuf.Google_Protobuf_StringValue>

  func chat(
    callOptions: CallOptions?,
    handler: @escaping (Action_ChatMessage) -> Void
  ) -> BidirectionalStreamingCall<Action_ChatMessage, Action_ChatMessage>

  func sendMessage(
    _ request: Action_ChatMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Action_ChatMessage, Action_ChatResponse>

  func addActivity(
    _ request: Action_AddActivityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Action_AddActivityRequest, Action_AddActivityResponse>

  func updateActivity(
    _ request: Action_UpdateActivityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Action_UpdateActivityRequest, Action_UpdateActivityResponse>

  func getActivity(
    _ request: Action_GetActivityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Action_GetActivityRequest, Action_GetActivityResponse>
}

extension Action_ActionWrapperClientProtocol {
  internal var serviceName: String {
    return "action.ActionWrapper"
  }

  /// Unary call to login
  ///
  /// - Parameters:
  ///   - request: Request to send to login.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func login(
    _ request: Action_User,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Action_User, SwiftProtobuf.Google_Protobuf_StringValue> {
    return self.makeUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeloginInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to chat
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func chat(
    callOptions: CallOptions? = nil,
    handler: @escaping (Action_ChatMessage) -> Void
  ) -> BidirectionalStreamingCall<Action_ChatMessage, Action_ChatMessage> {
    return self.makeBidirectionalStreamingCall(
      path: Action_ActionWrapperClientMetadata.Methods.chat.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makechatInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to SendMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendMessage(
    _ request: Action_ChatMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Action_ChatMessage, Action_ChatResponse> {
    return self.makeUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  /// Unary call to AddActivity
  ///
  /// - Parameters:
  ///   - request: Request to send to AddActivity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addActivity(
    _ request: Action_AddActivityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Action_AddActivityRequest, Action_AddActivityResponse> {
    return self.makeUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.addActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddActivityInterceptors() ?? []
    )
  }

  /// Unary call to UpdateActivity
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateActivity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateActivity(
    _ request: Action_UpdateActivityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Action_UpdateActivityRequest, Action_UpdateActivityResponse> {
    return self.makeUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.updateActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateActivityInterceptors() ?? []
    )
  }

  /// Unary call to GetActivity
  ///
  /// - Parameters:
  ///   - request: Request to send to GetActivity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getActivity(
    _ request: Action_GetActivityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Action_GetActivityRequest, Action_GetActivityResponse> {
    return self.makeUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.getActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetActivityInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Action_ActionWrapperClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Action_ActionWrapperNIOClient")
internal final class Action_ActionWrapperClient: Action_ActionWrapperClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the action.ActionWrapper service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Action_ActionWrapperNIOClient: Action_ActionWrapperClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol?

  /// Creates a client for the action.ActionWrapper service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Action_ActionWrapperAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol? { get }

  func makeLoginCall(
    _ request: Action_User,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Action_User, SwiftProtobuf.Google_Protobuf_StringValue>

  func makeChatCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Action_ChatMessage, Action_ChatMessage>

  func makeSendMessageCall(
    _ request: Action_ChatMessage,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Action_ChatMessage, Action_ChatResponse>

  func makeAddActivityCall(
    _ request: Action_AddActivityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Action_AddActivityRequest, Action_AddActivityResponse>

  func makeUpdateActivityCall(
    _ request: Action_UpdateActivityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Action_UpdateActivityRequest, Action_UpdateActivityResponse>

  func makeGetActivityCall(
    _ request: Action_GetActivityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Action_GetActivityRequest, Action_GetActivityResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Action_ActionWrapperAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Action_ActionWrapperClientMetadata.serviceDescriptor
  }

  internal var interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeLoginCall(
    _ request: Action_User,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Action_User, SwiftProtobuf.Google_Protobuf_StringValue> {
    return self.makeAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeloginInterceptors() ?? []
    )
  }

  internal func makeChatCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Action_ChatMessage, Action_ChatMessage> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Action_ActionWrapperClientMetadata.Methods.chat.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makechatInterceptors() ?? []
    )
  }

  internal func makeSendMessageCall(
    _ request: Action_ChatMessage,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Action_ChatMessage, Action_ChatResponse> {
    return self.makeAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  internal func makeAddActivityCall(
    _ request: Action_AddActivityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Action_AddActivityRequest, Action_AddActivityResponse> {
    return self.makeAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.addActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddActivityInterceptors() ?? []
    )
  }

  internal func makeUpdateActivityCall(
    _ request: Action_UpdateActivityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Action_UpdateActivityRequest, Action_UpdateActivityResponse> {
    return self.makeAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.updateActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateActivityInterceptors() ?? []
    )
  }

  internal func makeGetActivityCall(
    _ request: Action_GetActivityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Action_GetActivityRequest, Action_GetActivityResponse> {
    return self.makeAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.getActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetActivityInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Action_ActionWrapperAsyncClientProtocol {
  internal func login(
    _ request: Action_User,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_StringValue {
    return try await self.performAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeloginInterceptors() ?? []
    )
  }

  internal func chat<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Action_ChatMessage> where RequestStream: Sequence, RequestStream.Element == Action_ChatMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Action_ActionWrapperClientMetadata.Methods.chat.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makechatInterceptors() ?? []
    )
  }

  internal func chat<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Action_ChatMessage> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Action_ChatMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Action_ActionWrapperClientMetadata.Methods.chat.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makechatInterceptors() ?? []
    )
  }

  internal func sendMessage(
    _ request: Action_ChatMessage,
    callOptions: CallOptions? = nil
  ) async throws -> Action_ChatResponse {
    return try await self.performAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  internal func addActivity(
    _ request: Action_AddActivityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Action_AddActivityResponse {
    return try await self.performAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.addActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddActivityInterceptors() ?? []
    )
  }

  internal func updateActivity(
    _ request: Action_UpdateActivityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Action_UpdateActivityResponse {
    return try await self.performAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.updateActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateActivityInterceptors() ?? []
    )
  }

  internal func getActivity(
    _ request: Action_GetActivityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Action_GetActivityResponse {
    return try await self.performAsyncUnaryCall(
      path: Action_ActionWrapperClientMetadata.Methods.getActivity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetActivityInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Action_ActionWrapperAsyncClient: Action_ActionWrapperAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Action_ActionWrapperClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Action_ActionWrapperClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'login'.
  func makeloginInterceptors() -> [ClientInterceptor<Action_User, SwiftProtobuf.Google_Protobuf_StringValue>]

  /// - Returns: Interceptors to use when invoking 'chat'.
  func makechatInterceptors() -> [ClientInterceptor<Action_ChatMessage, Action_ChatMessage>]

  /// - Returns: Interceptors to use when invoking 'sendMessage'.
  func makeSendMessageInterceptors() -> [ClientInterceptor<Action_ChatMessage, Action_ChatResponse>]

  /// - Returns: Interceptors to use when invoking 'addActivity'.
  func makeAddActivityInterceptors() -> [ClientInterceptor<Action_AddActivityRequest, Action_AddActivityResponse>]

  /// - Returns: Interceptors to use when invoking 'updateActivity'.
  func makeUpdateActivityInterceptors() -> [ClientInterceptor<Action_UpdateActivityRequest, Action_UpdateActivityResponse>]

  /// - Returns: Interceptors to use when invoking 'getActivity'.
  func makeGetActivityInterceptors() -> [ClientInterceptor<Action_GetActivityRequest, Action_GetActivityResponse>]
}

internal enum Action_ActionWrapperClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ActionWrapper",
    fullName: "action.ActionWrapper",
    methods: [
      Action_ActionWrapperClientMetadata.Methods.login,
      Action_ActionWrapperClientMetadata.Methods.chat,
      Action_ActionWrapperClientMetadata.Methods.sendMessage,
      Action_ActionWrapperClientMetadata.Methods.addActivity,
      Action_ActionWrapperClientMetadata.Methods.updateActivity,
      Action_ActionWrapperClientMetadata.Methods.getActivity,
    ]
  )

  internal enum Methods {
    internal static let login = GRPCMethodDescriptor(
      name: "login",
      path: "/action.ActionWrapper/login",
      type: GRPCCallType.unary
    )

    internal static let chat = GRPCMethodDescriptor(
      name: "chat",
      path: "/action.ActionWrapper/chat",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/action.ActionWrapper/SendMessage",
      type: GRPCCallType.unary
    )

    internal static let addActivity = GRPCMethodDescriptor(
      name: "AddActivity",
      path: "/action.ActionWrapper/AddActivity",
      type: GRPCCallType.unary
    )

    internal static let updateActivity = GRPCMethodDescriptor(
      name: "UpdateActivity",
      path: "/action.ActionWrapper/UpdateActivity",
      type: GRPCCallType.unary
    )

    internal static let getActivity = GRPCMethodDescriptor(
      name: "GetActivity",
      path: "/action.ActionWrapper/GetActivity",
      type: GRPCCallType.unary
    )
  }
}

